
#
#  Copyright (c) 2018, Linaro Limited. All rights reserved.
#
#  This program and the accompanying materials
#  are licensed and made available under the terms and conditions of the BSD License
#  which accompanies this distribution.  The full text of the license may be found at
#  http://opensource.org/licenses/bsd-license.php
#
#  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
#  WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
#

################################################################################
#
# FD Section
# The [FD] Section is made up of the definition statements and a
# description of what goes into  the Flash Device Image.  Each FD section
# defines one flash "device" image.  A flash device image may be one of
# the following: Removable media bootable image (like a boot floppy
# image,) an Option ROM image (that would be "flashed" into an add-in
# card,) a System "Flash"  image (that would be burned into a system's
# flash) or an Update ("Capsule") image that will be used to update and
# existing system flash.
#
################################################################################

[FD.MSM8998Pkg_UEFI]
BaseAddress   = 0xd0000000|gArmTokenSpaceGuid.PcdFdBaseAddress  # The base address of the Firmware in NOR Flash.
Size          = 0x00600000|gArmTokenSpaceGuid.PcdFdSize         # The size in bytes of the FLASH Device
ErasePolarity = 1

# This one is tricky, it must be: BlockSize * NumBlocks = Size
BlockSize     = 0x00001000
NumBlocks     = 0x600

################################################################################
#
# Following are lists of FD Region layout which correspond to the locations of different
# images within the flash device.
#
# Regions must be defined in ascending order and may not overlap.
#
# A Layout Region start with a eight digit hex offset (leading "0x" required) followed by
# the pipe "|" character, followed by the size of the region, also in hex with the leading
# "0x" characters. Like:
# Offset|Size
# PcdOffsetCName|PcdSizeCName
# RegionType <FV, DATA, or FILE>
#
################################################################################

# from ArmVirtPkg/ArmVirtQemuKernel.fdf
#
# Implement the Linux kernel header layout so that the loader will identify
# it as something bootable, and execute it with a FDT pointer in x0 or r2.
#
0x00000000|0x00008000
DATA = {
  0x01, 0x00, 0x00, 0x10,                         # code0: adr x1, .
  0xff, 0x1f, 0x00, 0x14,                         # code1: b 0x8000
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, # text_offset: 512 KB
  0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, # image_size: 2 MB
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # flags
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # res2
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # res3
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # res4
  0x41, 0x52, 0x4d, 0x64,                         # magic: "ARM\x64"
  0x00, 0x00, 0x00, 0x00                          # res5
}

0x00008000|0x005f8000
gArmTokenSpaceGuid.PcdFvBaseAddress|gArmTokenSpaceGuid.PcdFvSize
FV = FVMAIN_COMPACT


################################################################################
#
# FV Section
#
# [FV] section is used to define what components or modules are placed within a flash
# device file.  This section also defines order the components and modules are positioned
# within the image.  The [FV] section consists of define statements, set statements and
# module statements.
#
################################################################################

[FV.FvMain]
BlockSize          = 0x40
NumBlocks          = 0         # This FV gets compressed so make it just big enough
FvAlignment        = 8         # FV alignment and FV attributes setting.
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE

APRIORI DXE {
    #
    # PI DXE Drivers producing Architectural Protocols (EFI Services)
    #
    INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf
    INF MdeModulePkg/Core/Dxe/DxeMain.inf
    INF MdeModulePkg/Universal/ReportStatusCodeRouter/RuntimeDxe/ReportStatusCodeRouterRuntimeDxe.inf
    INF MdeModulePkg/Universal/StatusCodeHandler/RuntimeDxe/StatusCodeHandlerRuntimeDxe.inf
    INF MdeModulePkg/Core/RuntimeDxe/RuntimeDxe.inf
    INF ArmPkg/Drivers/CpuDxe/CpuDxe.inf
    INF ArmPkg/Drivers/ArmGic/ArmGicDxe.inf
    INF ArmPkg/Drivers/TimerDxe/TimerDxe.inf
    INF MdeModulePkg/Universal/WatchdogTimerDxe/WatchdogTimer.inf
    INF MdeModulePkg/Universal/SecurityStubDxe/SecurityStubDxe.inf
    INF EmbeddedPkg/MetronomeDxe/MetronomeDxe.inf

    #
    # FAT filesystem + GPT/MBR partitioning
    #
    INF MdeModulePkg/Universal/Disk/DiskIoDxe/DiskIoDxe.inf
    INF MdeModulePkg/Universal/Disk/PartitionDxe/PartitionDxe.inf
    INF FatPkg/EnhancedFatDxe/Fat.inf
    INF MdeModulePkg/Universal/Disk/UnicodeCollation/EnglishDxe/EnglishDxe.inf
    INF MdeModulePkg/Universal/Variable/RuntimeDxe/VariableRuntimeDxe.inf

    INF EmbeddedPkg/EmbeddedMonotonicCounter/EmbeddedMonotonicCounter.inf
    INF MdeModulePkg/Universal/ResetSystemRuntimeDxe/ResetSystemRuntimeDxe.inf
    INF EmbeddedPkg/RealTimeClockRuntimeDxe/RealTimeClockRuntimeDxe.inf
    INF MdeModulePkg/Universal/DevicePathDxe/DevicePathDxe.inf
    INF MdeModulePkg/Universal/CapsuleRuntimeDxe/CapsuleRuntimeDxe.inf
    INF MdeModulePkg/Universal/HiiDatabaseDxe/HiiDatabaseDxe.inf

    INF MdeModulePkg/Universal/Console/ConPlatformDxe/ConPlatformDxe.inf
    INF MdeModulePkg/Universal/Console/ConSplitterDxe/ConSplitterDxe.inf
    INF MdeModulePkg/Universal/Console/GraphicsConsoleDxe/GraphicsConsoleDxe.inf

    FILE DRIVER = f541d663-4a48-40aa-aabf-ff158ccae34c {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SmemDxe/SmemDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/SmemDxe/SmemDxe.efi
    SECTION UI = "SmemDxe"
    }

    FILE DRIVER = 8e9bd160-b184-11df-94e2-0800200c9a66 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/DALSys/DALSys.depex
    SECTION PE32 = MSM8998Pkg/Binary/DALSys/DALSys.efi
    SECTION UI = "DALSys"
    }

    FILE DRIVER = af9763a2-033b-4109-8e17-56a98d380c92 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/HWIODxeDriver/HWIODxeDriver.depex
    SECTION PE32 = MSM8998Pkg/Binary/HWIODxeDriver/HWIODxeDriver.efi
    SECTION UI = "HWIODxeDriver"
    }

    FILE DRIVER = 10e193df-9966-44e7-b17c-59dd831e20fc {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/ChipInfo/ChipInfo.depex
    SECTION PE32 = MSM8998Pkg/Binary/ChipInfo/ChipInfo.efi
    SECTION UI = "ChipInfo"
    }

    FILE DRIVER = b105211b-bbbd-4add-a3b0-d1cf4a52154c {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/PlatformInfoDxeDriver/PlatformInfoDxeDriver.depex
    SECTION PE32 = MSM8998Pkg/Binary/PlatformInfoDxeDriver/PlatformInfoDxeDriver.efi
    SECTION UI = "PlatformInfoDxeDriver"
    }

    FILE DRIVER = 7942a7eb-b7d5-4e2e-b908-831e4de55b58 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/GlinkDxe/GlinkDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/GlinkDxe/GlinkDxe.efi
    SECTION UI = "GlinkDxe"
    }

    FILE DRIVER = e43128a8-8692-42b6-8afa-676158578d18 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/ULogDxe/ULogDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/ULogDxe/ULogDxe.efi
    SECTION UI = "ULogDxe"
    }


#    FILE DRIVER = 2a7b4bef-80cd-49e1-b473-374ba4d673fc {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SPMI/SPMI.depex
#    SECTION PE32 = MSM8998Pkg/Binary/SPMI/SPMI.efi
#    SECTION UI = "SPMI"
#    }

    FILE DRIVER = 7a32bd23-f735-4f57-aa1a-447d2fe3be0d {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SPI/SPI.depex
    SECTION PE32 = MSM8998Pkg/Binary/SPI/SPI.efi
    SECTION UI = "SPI"
    }

    FILE DRIVER = 04de8591-d2b3-4077-bbbe-b12070094eb6 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/I2C/I2C.depex
    SECTION PE32 = MSM8998Pkg/Binary/I2C/I2C.efi
    SECTION UI = "I2C"
    }

    # other driver
#    FILE DRIVER = 5776232e-082d-4b75-9a0e-fe1d13f7a5d9 {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/PmicDxe/PmicDxe.depex
#    SECTION PE32 = MSM8998Pkg/Binary/PmicDxe/PmicDxe.efi
#    SECTION UI = "PmicDxe"
#    }

#    FILE DRIVER = 9A5163E7-5C29-453F-825C-837A46A81E15 {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SerialDxe/SerialDxe.depex
#    SECTION PE32 = MSM8998Pkg/Binary/SerialDxe/SerialDxe.efi
#    SECTION UI = "SerialDxe"
#    } 

    INF MdeModulePkg/Universal/BdsDxe/BdsDxe.inf  

}
  
    INF MdeModulePkg/Core/Dxe/DxeMain.inf

    #
    # PI DXE Drivers producing Architectural Protocols (EFI Services)
    #
    INF MdeModulePkg/Universal/PCD/Dxe/Pcd.inf
    INF ArmPkg/Drivers/CpuDxe/CpuDxe.inf
    INF MdeModulePkg/Core/RuntimeDxe/RuntimeDxe.inf
    INF MdeModulePkg/Universal/SecurityStubDxe/SecurityStubDxe.inf
    INF MdeModulePkg/Universal/CapsuleRuntimeDxe/CapsuleRuntimeDxe.inf
    INF EmbeddedPkg/EmbeddedMonotonicCounter/EmbeddedMonotonicCounter.inf
    INF MdeModulePkg/Universal/ResetSystemRuntimeDxe/ResetSystemRuntimeDxe.inf
    INF EmbeddedPkg/RealTimeClockRuntimeDxe/RealTimeClockRuntimeDxe.inf
    INF EmbeddedPkg/MetronomeDxe/MetronomeDxe.inf

    #
    # Multiple Console IO support
    #
    INF MdeModulePkg/Universal/Console/ConPlatformDxe/ConPlatformDxe.inf
    INF MdeModulePkg/Universal/Console/ConSplitterDxe/ConSplitterDxe.inf
    INF MdeModulePkg/Universal/Console/GraphicsConsoleDxe/GraphicsConsoleDxe.inf
    INF MdeModulePkg/Universal/Console/TerminalDxe/TerminalDxe.inf
    INF MdeModulePkg/Universal/SerialDxe/SerialDxe.inf

    INF ArmPkg/Drivers/ArmGic/ArmGicDxe.inf
    INF ArmPkg/Drivers/TimerDxe/TimerDxe.inf

    INF MdeModulePkg/Universal/WatchdogTimerDxe/WatchdogTimer.inf

    #
    # Binary DXE drivers
    # WP driver : SmemDxe
    #

    FILE DRIVER = f541d663-4a48-40aa-aabf-ff158ccae34c {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SmemDxe/SmemDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/SmemDxe/SmemDxe.efi
    SECTION UI = "SmemDxe"
    }

    FILE DRIVER = 8e9bd160-b184-11df-94e2-0800200c9a66 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/DALSys/DALSys.depex
    SECTION PE32 = MSM8998Pkg/Binary/DALSys/DALSys.efi
    SECTION UI = "DALSys"
    }

    FILE DRIVER = af9763a2-033b-4109-8e17-56a98d380c92 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/HWIODxeDriver/HWIODxeDriver.depex
    SECTION PE32 = MSM8998Pkg/Binary/HWIODxeDriver/HWIODxeDriver.efi
    SECTION UI = "HWIODxeDriver"
    }

    FILE DRIVER = 10e193df-9966-44e7-b17c-59dd831e20fc {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/ChipInfo/ChipInfo.depex
    SECTION PE32 = MSM8998Pkg/Binary/ChipInfo/ChipInfo.efi
    SECTION UI = "ChipInfo"
    }

    FILE DRIVER = b105211b-bbbd-4add-a3b0-d1cf4a52154c {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/PlatformInfoDxeDriver/PlatformInfoDxeDriver.depex
    SECTION PE32 = MSM8998Pkg/Binary/PlatformInfoDxeDriver/PlatformInfoDxeDriver.efi
    SECTION UI = "PlatformInfoDxeDriver"
    }

    FILE DRIVER = 7942a7eb-b7d5-4e2e-b908-831e4de55b58 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/GlinkDxe/GlinkDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/GlinkDxe/GlinkDxe.efi
    SECTION UI = "GlinkDxe"
    }

    FILE DRIVER = e43128a8-8692-42b6-8afa-676158578d18 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/ULogDxe/ULogDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/ULogDxe/ULogDxe.efi
    SECTION UI = "ULogDxe"
    }

#    FILE DRIVER = cb29f4d1-7f37-4692-a416-93e82e219711 {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/NpaDxe/NpaDxe.depex
#    SECTION PE32 = MSM8998Pkg/Binary/NpaDxe/NpaDxe.efi
#    SECTION UI = "NpaDxe"
#    }

#    FILE DRIVER = 4db5dea6-5302-4d1a-8a82-677a683b0d29 {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/ClockDxe/ClockDxe.depex
#    SECTION PE32 = MSM8998Pkg/Binary/ClockDxe/ClockDxe.efi
#    SECTION UI = "ClockDxe"
#    }

    FILE DRIVER = 0d35cd8e-97ea-4f9a-96af-0f0d89f76567 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/UFSDxe/UFSDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/UFSDxe/UFSDxe.efi
    SECTION UI = "UFSDxe"
    }

    FILE DRIVER = 8681cc5a-0df6-441e-b4b8-e915c538f067 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/DALTLMM/DALTLMM.depex
    SECTION PE32 = MSM8998Pkg/Binary/DALTLMM/DALTLMM.efi
    SECTION UI = "DALTLMM"
    }

    FILE DRIVER = 04de8591-d2b3-4077-bbbe-b12070094eb6 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/I2C/I2C.depex
    SECTION PE32 = MSM8998Pkg/Binary/I2C/I2C.efi
    SECTION UI = "I2C"
    }

#    FILE DRIVER = 2a7b4bef-80cd-49e1-b473-374ba4d673fc {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SPMI/SPMI.depex
#    SECTION PE32 = MSM8998Pkg/Binary/SPMI/SPMI.efi
#    SECTION UI = "SPMI"
#    }

    FILE DRIVER = 7a32bd23-f735-4f57-aa1a-447d2fe3be0d {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SPI/SPI.depex
    SECTION PE32 = MSM8998Pkg/Binary/SPI/SPI.efi
    SECTION UI = "SPI"
    }

#    FILE DRIVER = 5776232e-082d-4b75-9a0e-fe1d13f7a5d9 {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/PmicDxe/PmicDxe.depex
#    SECTION PE32 = MSM8998Pkg/Binary/PmicDxe/PmicDxe.efi
#    SECTION UI = "PmicDxe"
#    }

    FILE DRIVER = 5bd181db-0487-4f1a-ae73-820e165611b3 {
    SECTION DXE_DEPEX = MSM8998Pkg/Binary/ButtonsDxe/ButtonsDxe.depex
    SECTION PE32 = MSM8998Pkg/Binary/ButtonsDxe/ButtonsDxe.efi
    SECTION UI = "ButtonsDxe"
    }

#    FILE DRIVER = 9A5163E7-5C29-453F-825C-837A46A81E15 {
#    SECTION DXE_DEPEX = MSM8998Pkg/Binary/SerialDxe/SerialDxe.depex
#    SECTION PE32 = MSM8998Pkg/Binary/SerialDxe/SerialDxe.efi
#    SECTION UI = "SerialDxe"
#    } 

    #
    # Virtual Keyboard
    #
    INF EmbeddedPkg/Drivers/VirtualKeyboardDxe/VirtualKeyboardDxe.inf

    INF Platforms/Msm8998FamilyPkg/Drivers/MSM8998Dxe/MSM8998Dxe.inf
    INF Platforms/Msm8998FamilyPkg/Drivers/SimpleFbDxe/SimpleFbDxe.inf

    #
    # USB Host Support
    #
    INF MdeModulePkg/Bus/Usb/UsbBusDxe/UsbBusDxe.inf

    #
    # USB Mass Storage Support
    #
    INF MdeModulePkg/Bus/Usb/UsbMassStorageDxe/UsbMassStorageDxe.inf

    #
    # USB Peripheral Support
    #
    INF EmbeddedPkg/Drivers/AndroidFastbootTransportUsbDxe/FastbootTransportUsbDxe.inf

    #
    # Fastboot
    #
    INF EmbeddedPkg/Application/AndroidFastboot/AndroidFastbootApp.inf

    #
    # FAT filesystem + GPT/MBR partitioning
    #
    INF MdeModulePkg/Universal/Disk/DiskIoDxe/DiskIoDxe.inf
    INF MdeModulePkg/Universal/Disk/PartitionDxe/PartitionDxe.inf
    INF FatPkg/EnhancedFatDxe/Fat.inf
    INF MdeModulePkg/Universal/Disk/UnicodeCollation/EnglishDxe/EnglishDxe.inf

    INF MdeModulePkg/Universal/Variable/RuntimeDxe/VariableRuntimeDxe.inf

    INF MdeModulePkg/Universal/HiiDatabaseDxe/HiiDatabaseDxe.inf

    #
    # ACPI Support
    #
    INF MdeModulePkg/Universal/Acpi/AcpiTableDxe/AcpiTableDxe.inf
    INF MdeModulePkg/Universal/Acpi/AcpiPlatformDxe/AcpiPlatformDxe.inf
    INF MdeModulePkg/Universal/Acpi/BootGraphicsResourceTableDxe/BootGraphicsResourceTableDxe.inf

    # Use custom ACPI
    INF RuleOverride = ACPITABLE MSM8998Pkg/AcpiTables/AcpiTables.inf

#    FILE FREEFORM = 7E374E25-8E01-4FEE-87F2-390C23C606CD {
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/DBG2.aml
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/DSDT.aml
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/FACS.aml
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/FADT.aml
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/GTDT.aml
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/MADT.aml
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/MCFG.aml
#        SECTION RAW = MSM8998Pkg/AcpiTables/8998/build/CSRT.aml
#        SECTION UI = "AcpiTables"
#    }

    #
    # SMBIOS Support
    #
    INF Platforms/Msm8998FamilyPkg/Drivers/PlatformSmbiosDxe/PlatformSmbiosDxe.inf
    INF MdeModulePkg/Universal/SmbiosDxe/SmbiosDxe.inf

    #
    # UEFI applications
    #
    INF ShellPkg/Application/Shell/Shell.inf
!ifdef $(INCLUDE_TFTP_COMMAND)
    INF ShellPkg/DynamicCommand/TftpDynamicCommand/TftpDynamicCommand.inf
!endif #$(INCLUDE_TFTP_COMMAND)

    INF Platforms/Msm8998FamilyPkg/LinuxSimpleMassStorage/LinuxSimpleMassStorage.inf

    #
    # Bds
    #
    INF MdeModulePkg/Universal/PrintDxe/PrintDxe.inf
    INF MdeModulePkg/Universal/DevicePathDxe/DevicePathDxe.inf
    INF MdeModulePkg/Universal/DisplayEngineDxe/DisplayEngineDxe.inf
    INF MdeModulePkg/Universal/SetupBrowserDxe/SetupBrowserDxe.inf
    INF MdeModulePkg/Universal/DriverHealthManagerDxe/DriverHealthManagerDxe.inf
    INF MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
    INF MdeModulePkg/Application/UiApp/UiApp.inf
    INF Platforms/Msm8998FamilyPkg/Drivers/LogoDxe/LogoDxe.inf

  #
  # Simple Init GUI
  #
  INF src/main/SimpleInitMain.inf
  // Boom
#   INF src/kernelfdt/KernelFdtDxe.inf

[FV.FVMAIN_COMPACT]
FvAlignment        = 8
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE

    INF ArmPlatformPkg/PrePi/PeiUniCore.inf

    FILE FV_IMAGE = 9E21FD93-9C72-4c15-8C4B-E77F1DB2D792 {
        SECTION GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF PROCESSING_REQUIRED = TRUE {
            SECTION FV_IMAGE = FVMAIN
        }
    }

!include Platforms/Msm8998FamilyPkg/Msm8998FamilyPkg.fdf.inc
